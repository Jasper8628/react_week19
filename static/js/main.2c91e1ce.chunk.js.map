{"version":3,"sources":["components/ResultList.js","components/SearchForm.js","utils/API.js","components/SearchResultContainer.js","App.js","serviceWorker.js","index.js"],"names":["ResultList","props","className","scope","name","type","onClick","handleSort","buttName","results","map","result","key","id","alt","src","picture","medium","first","last","email","phone","dob","age","SearchForm","htmlFor","onChange","handleInputChange","placeholder","axios","require","get","SearchResultContainer","state","search","filter","sort","ApiCall","API","then","res","setState","data","catch","err","console","log","event","target","value","toLowerCase","indexOf","handleFormSubmit","preventDefault","a","b","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2c91e1ce.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction ResultList(props) {\n    return (\n        <table className=\"table\">\n            <thead>\n                <tr >\n                    <th scope=\"col\">Photo</th>\n                    <th scope=\"col\"> Name</th>\n                    <th scope=\"col\">Email</th>\n                    <th scope=\"col\">Phone Number</th>\n                    <th scope=\"col\"  >Age <button \n                    name=\"age\"\n                    type=\"button\"\n                    onClick={props.handleSort}>{props.buttName}</button> </th>\n                </tr>\n\n            </thead>\n            {props.results.map(result => (\n                <tbody>\n                    <tr key={result.id}>\n                        <td>\n                            <img alt='' className=\"img-fluid\" src={result.picture.medium} />\n                        </td>\n                        <td> {result.name.first} {result.name.last}</td>\n                        <td> {result.email}</td>\n                        <td> {result.phone}</td>\n                        <td> {result.dob.age}</td>\n                    </tr>\n\n                </tbody>\n            ))}\n        </table>\n    );\n}\nexport default ResultList;","import React from \"react\";\n\nfunction SearchForm(props) {\n  return (\n    <form>\n      <div className=\"form-group\"  >\n        <label htmlFor=\"search\">Search First Name:</label>\n        <input\n          onChange={props.handleInputChange}\n          //value={props.search}\n          name=\"first\"\n          type=\"text\"\n          className=\"form-control col-md-3\"\n          placeholder=\"Search by first name\"\n        />\n        <br/>\n         <label htmlFor=\"search\">Search Last Name:</label>\n        <input\n          onChange={props.handleInputChange}\n          //value={props.search}\n          name=\"last\"\n          type=\"text\"\n          className=\"form-control col-md-3\"\n          placeholder=\"Search by last name\"\n         \n        />\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;","let axios =require(\"axios\") ;\n\nconst BASEURL = 'https://randomuser.me/api/?results=10';\n//const APIKEY = \"6Q85-YWJ2-03OF-XZBF\";\n\n\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\n\nexport default {\n    search: function() {\n      return axios.get(BASEURL);\n    }\n  };\n\n\n\n\n\n\n\n//  const apiCall= ()=> {\n//      axios.get(BASEURL)\n//      .then(res=>{\n//          console.log(res.data.results[0]);\n//      });\n// }\n// apiCall();\n","import React, { Component } from \"react\";\nimport ResultList from \"./ResultList\";\nimport SearchForm from \"./SearchForm\";\nimport API from \"../utils/API\";\n\nclass SearchResultContainer extends Component {\n    state = {\n        search: \"\",\n        results: [],\n        filter: [],\n        sort: \"asc\"\n    }\n\n    componentDidMount() {\n        this.ApiCall();\n    }\n\n    ApiCall = () => {\n        API.search()\n            .then(res => this.setState({\n                results: res.data.results,\n                filter: res.data.results\n            })\n            )\n            .catch(err => console.log(err));\n    };\n\n    handleInputChange = event => {\n        const name = event.target.name;\n        const value = event.target.value;\n        switch (name) {\n            case \"first\":\n                this.setState({\n                    search: value,\n                    filter: this.state.results.filter(result => result.name.first.toLowerCase().indexOf(value) != -1)\n                });\n                break;\n            case \"last\":\n\n                this.setState({\n                    search: value,\n                    filter: this.state.results.filter(result => result.name.last.toLowerCase().indexOf(value) != -1)\n                });\n                break;\n        }\n        console.log(name);\n\n\n\n    };\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n        this.ApiCall();\n    };\n    handleSort = event => {\n        function compareAsc(a, b) {\n            if (a.dob.age > b.dob.age) return 1;\n            if (b.dob.age > a.dob.age) return -1;\n        }\n        function compareDesc(a, b) {\n            if (a.dob.age > b.dob.age) return -1;\n            if (b.dob.age > a.dob.age) return 1;\n        }\n\n        if (this.state.sort === \"asc\") {\n            this.setState({\n                filter: this.state.results.sort(compareAsc),\n                sort: \"desc\"\n            });\n        } else {\n            this.setState({\n                filter: this.state.results.sort(compareDesc),\n                sort: \"asc\"\n            });\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                <SearchForm\n                    //search = {this.state.search}\n                    //handleFormSubmit = {this.handleFormSubmit}\n                    handleInputChange={this.handleInputChange}\n\n                />\n                <ResultList\n                    buttName={this.state.sort}\n                    results={this.state.filter}\n                    handleSort={this.handleSort}\n                />\n            </div>\n        );\n    }\n}\nexport default SearchResultContainer;","import React from 'react';\n//import logo from './logo.svg';\n//import './App.css';\nimport SearchResultContainer from \"./components/SearchResultContainer\";\n\nfunction App() {\n  return <SearchResultContainer/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}